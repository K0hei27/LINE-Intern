{
	"info": {
		"_postman_id": "7021f8c2-ff48-4df7-9ebb-95cd33e90df1",
		"name": "Create & Delete User",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create user 'USER1' without sid",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4fbf8146-396a-478f-b406-b400f2bf879c",
						"type": "text/javascript",
						"exec": [
							"function mkseed() {",
							"    var text = \"\";",
							"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
							"",
							"    for (var i = 0; i < 16; i++)",
							"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
							"",
							"    return text;",
							"}",
							"",
							"pm.globals.set(\"user1_sid\", mkseed());",
							"pm.globals.set(\"user1_name\", mkseed());",
							"pm.globals.set(\"user1_pass\", mkseed());"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "db7ce76e-ea8c-4f97-a24f-62eeaa552eed",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 400;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{user1_name}}\",\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/users",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user 'USER1' without name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4fbf8146-396a-478f-b406-b400f2bf879c",
						"type": "text/javascript",
						"exec": [
							"function mkseed() {",
							"    var text = \"\";",
							"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
							"",
							"    for (var i = 0; i < 16; i++)",
							"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
							"",
							"    return text;",
							"}",
							"",
							"pm.globals.set(\"user1_sid\", mkseed());",
							"pm.globals.set(\"user1_name\", mkseed());",
							"pm.globals.set(\"user1_pass\", mkseed());"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8af022ce-5400-41e6-b8c7-db5560168c6f",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 400;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"sid\": \"{{user1_sid}}\",\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/users",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user 'USER1' without pass",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4fbf8146-396a-478f-b406-b400f2bf879c",
						"type": "text/javascript",
						"exec": [
							"function mkseed() {",
							"    var text = \"\";",
							"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
							"",
							"    for (var i = 0; i < 16; i++)",
							"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
							"",
							"    return text;",
							"}",
							"",
							"pm.globals.set(\"user1_sid\", mkseed());",
							"pm.globals.set(\"user1_name\", mkseed());",
							"pm.globals.set(\"user1_pass\", mkseed());"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0535f156-5375-4ebf-952b-3c07e3946f0d",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 400;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"sid\": \"{{user1_sid}}\",\n\t\"name\": \"{{user1_name}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/users",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user 'USER1'",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4fbf8146-396a-478f-b406-b400f2bf879c",
						"type": "text/javascript",
						"exec": [
							"function mkseed() {",
							"    var text = \"\";",
							"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
							"",
							"    for (var i = 0; i < 16; i++)",
							"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
							"",
							"    return text;",
							"}",
							"",
							"pm.globals.set(\"user1_sid\", mkseed());",
							"pm.globals.set(\"user1_name\", mkseed());",
							"pm.globals.set(\"user1_pass\", mkseed());"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2bca5687-f7ab-4a93-acfc-4cfa4f9848ac",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 200;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"const schema = {",
							"  \"required\": [\"id\", \"sid\", \"name\", \"created_at\", \"updated_at\"],",
							"  \"properties\": {",
							"    \"id\": { \"type\": \"string\" },",
							"    \"sid\": { \"type\": \"string\" },",
							"    \"name\": { \"type\": \"string\" },",
							"    \"created_at\": { \"type\": \"string\" },",
							"    \"updated_at\": { \"type\": \"string\" },",
							"  }",
							"};",
							"",
							"const res = JSON.parse(responseBody);",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(tv4.validate(res, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Parameter Constraints meets\", function() {",
							"    const user1_sid = pm.globals.get(\"user1_sid\");",
							"    const user1_name = pm.globals.get(\"user1_name\");",
							"    ",
							"    pm.expect(res.sid === user1_sid).to.be.true;",
							"    pm.expect(res.name === user1_name).to.be.true;",
							"    pm.expect(res.created_at === res.updated_at).to.be.true;",
							"});",
							"",
							"pm.globals.set(\"user1_id\", res.id);"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"sid\": \"{{user1_sid}}\",\n\t\"name\": \"{{user1_name}}\",\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/users",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user 'USER1' again",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0aa57328-faba-4bd5-8cdf-4852691d556a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e823fcb7-c684-4fc5-8378-abd0df88abf1",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 400;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"sid\": \"{{user1_sid}}\",\n\t\"name\": \"{{user1_name}}\",\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/users",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get token for 'USER1' without sid Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65222bb2-56f5-4d8d-bf49-08c2e43e54db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d12b2f38-9d21-49ed-aae5-cdabc309b050",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 400;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/token",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get token for 'USER1' without sid",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65222bb2-56f5-4d8d-bf49-08c2e43e54db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0b8f0236-94dc-4dc1-aacc-56886e02bb1f",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 400;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/token",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get token for 'USER1' without pass",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65222bb2-56f5-4d8d-bf49-08c2e43e54db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "369bdff3-21eb-42f9-9175-4cb280265dcd",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 400;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/token",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get token for 'USER1'",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65222bb2-56f5-4d8d-bf49-08c2e43e54db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0f05d678-cafa-414d-97dc-c0f0a3645ec7",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 200;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"const schema = {",
							"  \"required\": [\"token\"],",
							"  \"properties\": {",
							"    \"token\": { \"type\": \"string\" },",
							"  }",
							"};",
							"",
							"const res = JSON.parse(responseBody);",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(tv4.validate(res, schema)).to.be.true;",
							"});",
							"",
							"pm.globals.set(\"user1_token\", res.token);"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"sid\": \"{{user1_sid}}\",\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/token",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get token for 'USER1' again",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65222bb2-56f5-4d8d-bf49-08c2e43e54db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "14cc30c9-1189-4cc0-b679-deef29f92d9e",
						"type": "text/javascript",
						"exec": [
							"const schema = {",
							"  \"required\": [\"token\"],",
							"  \"properties\": {",
							"    \"token\": { \"type\": \"string\" },",
							"  }",
							"};",
							"",
							"const res = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(tv4.validate(res, schema)).to.be.true;",
							"});",
							"",
							"pm.globals.set(\"user1_token\", res.token);"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"sid\": \"{{user1_sid}}\",\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/token",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get token for 'USER1' again with token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65222bb2-56f5-4d8d-bf49-08c2e43e54db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "14cc30c9-1189-4cc0-b679-deef29f92d9e",
						"type": "text/javascript",
						"exec": [
							"const schema = {",
							"  \"required\": [\"token\"],",
							"  \"properties\": {",
							"    \"token\": { \"type\": \"string\" },",
							"  }",
							"};",
							"",
							"const res = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(tv4.validate(res, schema)).to.be.true;",
							"});",
							"",
							"pm.globals.set(\"user1_token\", res.token);"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"sid\": \"{{user1_sid}}\",\n\t\"pass\": \"{{user1_pass}}\"\n}"
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/token",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user 'USER1' without token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65222bb2-56f5-4d8d-bf49-08c2e43e54db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2878ae18-682f-4e74-bf98-bab527f971a2",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 403;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/users/{{user1_id}}",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"users",
						"{{user1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user 'USER1'",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65222bb2-56f5-4d8d-bf49-08c2e43e54db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2743c8f-fba1-45eb-bcdd-c6c164e3e1cd",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 200;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/users/{{user1_id}}",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"users",
						"{{user1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user 'USER1' again",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65222bb2-56f5-4d8d-bf49-08c2e43e54db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ca3f5a4a-a0bf-4567-b92f-94f30d01461d",
						"type": "text/javascript",
						"exec": [
							"const statusCode = 400;",
							"if (statusCode !== null) {",
							"    pm.test(\"Status code is \" + statusCode, function () {",
							"        pm.response.to.have.status(statusCode);",
							"    });",
							"}",
							"",
							"pm.test('the length of response is 0', function() {",
							"    pm.expect(responseBody.length === 0).to.be.true;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user1_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SCHEME}}://{{HOST}}/users/{{user1_id}}",
					"protocol": "{{SCHEME}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"users",
						"{{user1_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "25dfe65a-bdf1-4f61-bdf6-6e098d0300d9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "dd27cd42-e93f-46cb-a4f1-0baa840ecde6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}